from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import Users
import translations

# === –ö–ù–û–ü–ö–ò ===
ASK_WORD= 2
def get_start_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"""
    return ReplyKeyboardMarkup(
        [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]],
        resize_keyboard=True
    )

def get_main_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"""
    return ReplyKeyboardMarkup(
        [["–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞"],
         ["–°–ª–æ–≤–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ"],["–µ—â–µ"]],
        resize_keyboard=True
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = Users.User.search_user(user_id)

    if user:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}!",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.",
            reply_markup=get_start_keyboard()
        )
async def translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = Users.User.search_user(user_id)  # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user is None:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END

    word = update.message.text

    await update.message.reply_text(f"–¢—ã –≤–≤–µ–ª —Å–ª–æ–≤–æ '{word}', –ø–µ—Ä–µ–≤–æ–∂—É...")

    meaning = translations.Translator.transl(word)
    if meaning.lower() == word.lower():
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥ : {meaning}")

        user.add_word(word, meaning)
        print(f"Word   '{word}'  added by {update.effective_user.name}")
        await update.message.reply_text(f"—Å–ª–æ–≤–æ '{word}', –∑–Ω–∞—á–µ–Ω–∏–µ '{meaning}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å ",
        reply_markup = get_main_keyboard())
    context.user_data.pop("awaiting_word", None)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    user = Users.User.search_user(user_id)

    if context.user_data.get("awaiting_word"):
        await translation(update, context)
        return

    if text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        if user:
            await update.message.reply_text(
                "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
                reply_markup=get_main_keyboard()
            )
        else:
            name = update.effective_user.first_name
            Users.User.create_user(user_id, name)
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! üéâ",
                reply_markup=get_main_keyboard()
            )

    elif not user:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.",
            reply_markup=get_start_keyboard()
        )

    if text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ":

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")

        context.user_data["awaiting_word"] = True

        return

    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞":
        vocab = translations.Translator.show_vocabular(user)
        await update.message.reply_text(vocab)

    elif text == "–°–ª–æ–≤–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è":
        vocab = translations.Translator.show_todays_vocabular(user)
        await update.message.reply_text(vocab)

    elif text == "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ":
        deleted = user.delete_last_word()
        await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {deleted}")


    elif text == "–µ—â–µ":
        return ReplyKeyboardMarkup(
            [["–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞"],
             ["–°–ª–æ–≤–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ"], ["–µ—â–µ"]],
            resize_keyboard=True
        )

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    TOKEN = "8482723120:AAEF2EoJilWLMwqyHrLTjdAc6II7Lv5ntMc"

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
